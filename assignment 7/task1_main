#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "inc/hw_ints.h"
#include "driverlib/interrupt.h"
#include "driverlib/adc.h"
#define TARGET_IS_BLIZZARD_RB1
#include "driverlib/rom.h"
#include "driverlib/timer.h"


// ===============================================================
// global variables
// ===============================================================

volatile uint32_t ui32TempAvg;
volatile uint32_t ui32TempValueC;
volatile uint32_t ui32TempValueF;

// ===============================================================
// interrupt handlers
// ===============================================================

void Timer1IntHandler(void)
{
    uint32_t ui32ADC0Value[4];
    char tempconvert[10];
    int i;

    // Clear the timer interrupt
    ROM_TimerIntClear(TIMER1_BASE, TIMER_TIMA_TIMEOUT);
    ROM_ADCIntClear(ADC0_BASE, 2);
    ROM_ADCProcessorTrigger(ADC0_BASE, 2);

    while(!ROM_ADCIntStatus(ADC0_BASE, 2, false)){}
    ROM_ADCSequenceDataGet(ADC0_BASE, 2, ui32ADC0Value);
    ui32TempAvg = (ui32ADC0Value[0] + ui32ADC0Value[1] + ui32ADC0Value[2] +ui32ADC0Value[3] + 2)/4;
    ui32TempValueC = (1475 - ((2475 * ui32TempAvg)) / 4096)/10;
    ui32TempValueF = ((ui32TempValueC * 9) + 160) / 5;

    i = 0;
    while (ui32TempValueF != 0)
    {
        tempconvert[i++] = (ui32TempValueF % 10) + '0';
        ui32TempValueF = ui32TempValueF / 10;
    }

// for the purpose of this task we only need the lower 16 bits of ui32TempValueF
// to output the temperature to UART.
    UARTCharPut(UART0_BASE, tempconvert[1]);
    UARTCharPut(UART0_BASE, tempconvert[0]);
    UARTCharPut(UART0_BASE, ' ');
    UARTCharPut(UART0_BASE, 'F');
    UARTCharPut(UART0_BASE, '\n');
    UARTCharPut(UART0_BASE, '\r');

    // reload timer1 to begin 0.5s delay
    ROM_TimerLoadSet(TIMER1_BASE, TIMER_A, SysCtlClockGet()/2);
}

// ===============================================================
// main function
// ===============================================================

int main(void)
{

    ROM_SysCtlClockSet(
            SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN
                    | SYSCTL_XTAL_16MHZ);

    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

    ROM_GPIOPinConfigure(GPIO_PA0_U0RX);
    ROM_GPIOPinConfigure(GPIO_PA1_U0TX);
    ROM_GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    ROM_GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);

    ROM_UARTConfigSetExpClk(
            UART0_BASE, SysCtlClockGet(), 115200,
            (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));

    // timer and ADC set up

    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER1);
    ROM_TimerConfigure(TIMER1_BASE, TIMER_CFG_PERIODIC);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    ROM_ADCHardwareOversampleConfigure(ADC0_BASE, 8);

    ROM_ADCSequenceConfigure(ADC0_BASE, 2, ADC_TRIGGER_PROCESSOR, 0);
    ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 0, ADC_CTL_TS);
    ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 1, ADC_CTL_TS);
    ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 2, ADC_CTL_TS);
    ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 3, ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END);
    ROM_ADCSequenceEnable(ADC0_BASE, 2);
    // set timer to 2Hz (0.5s)
    ROM_TimerLoadSet(TIMER1_BASE, TIMER_A, (SysCtlClockGet()/2));

    ROM_IntMasterEnable();
    ROM_IntEnable(INT_UART0);

    ROM_IntEnable(INT_TIMER1A);
    ROM_TimerIntEnable(TIMER1_BASE, TIMER_TIMA_TIMEOUT);
    ROM_UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);

    ROM_UARTCharPut(UART0_BASE, 'T');
    ROM_UARTCharPut(UART0_BASE, 'e');
    ROM_UARTCharPut(UART0_BASE, 'm');
    ROM_UARTCharPut(UART0_BASE, 'p');
    ROM_UARTCharPut(UART0_BASE, 'e');
    ROM_UARTCharPut(UART0_BASE, 'r');
    ROM_UARTCharPut(UART0_BASE, 'a');
    ROM_UARTCharPut(UART0_BASE, 't');
    ROM_UARTCharPut(UART0_BASE, 'u');
    ROM_UARTCharPut(UART0_BASE, 'r');
    ROM_UARTCharPut(UART0_BASE, 'e');
    ROM_UARTCharPut(UART0_BASE, ':');
    ROM_UARTCharPut(UART0_BASE, '\n');
    ROM_UARTCharPut(UART0_BASE, '\r');

    ROM_TimerEnable(TIMER1_BASE, TIMER_A);

    while (1)
    {
    }
}
