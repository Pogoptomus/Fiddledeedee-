#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"

#define PWM_FREQUENCY 55    // 55Hz base frequency

int main(void)
{
    volatile uint32_t ui32Load;
    volatile uint32_t ui32PWMClock;
    volatile uint8_t ui8Adjust;
    // servo center position:
    // to find pulse width of 1.5ms use equation (PWM period) / 1000.
    // with frequency 55Hz, period = 18.2ms so 18.2 / 1000 = 18.2us,
    // 1.5m / 18.2u = 82.4, so the center position value used is 83
    ui8Adjust = 83;

    ROM_SysCtlClockSet(
            SYSCTL_SYSDIV_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN
                    | SYSCTL_XTAL_16MHZ);
    ROM_SysCtlPWMClockSet(SYSCTL_PWMDIV_64);

    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    ROM_GPIOPinTypePWM(GPIO_PORTD_BASE, GPIO_PIN_0);
    ROM_GPIOPinConfigure(GPIO_PD0_M1PWM0);

    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;
    ROM_GPIODirModeSet(GPIO_PORTF_BASE, GPIO_PIN_4 | GPIO_PIN_0,
                       GPIO_DIR_MODE_IN);
    ROM_GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4 | GPIO_PIN_0,
                         GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

    ui32PWMClock = SysCtlClockGet() / 64;
    ui32Load = (ui32PWMClock / PWM_FREQUENCY) - 1;
    PWMGenConfigure(PWM1_BASE, PWM_GEN_0, PWM_GEN_MODE_DOWN);
    PWMGenPeriodSet(PWM1_BASE, PWM_GEN_0, ui32Load);

    ROM_PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, ui8Adjust * ui32Load / 1000);
    ROM_PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT, true);
    ROM_PWMGenEnable(PWM1_BASE, PWM_GEN_0);

    while (1)
    {
        // min adjust value equation
        // pulsewidth = adjust*load / 1000
        // load = PWMClk / PWMfrequency
        //
        // minPWMtime = pulsewidth/PWMClk
        // combining the two equations together
        // minPWMtime = adjust*load/(1000*PWMClk)
        // rearranging this we get:
        // adjust = minPWMtime*1000*PWMClk/load
        // so adjust = 0.5ms * 1000 * 625000 / 11363 = 27.5 so we use 28
        if (ROM_GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00)
        {
            ui8Adjust--;
            if (ui8Adjust < 28)
            {
                ui8Adjust = 28;
            }
            ROM_PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0,
                                 ui8Adjust * ui32Load / 1000);
        }
        // max adjust value is the same as the min value
        // but now we use maxPWMtime so:
        // adjust = 2.5ms * 1000 * 625000 / 11363 = 137.5 so 138 is used
        if (ROM_GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00)
        {
            ui8Adjust++;
            if (ui8Adjust > 138)
            {
                ui8Adjust = 138;
            }
            ROM_PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0,
                                 ui8Adjust * ui32Load / 1000);
        }
        ROM_SysCtlDelay(100000);
    }
}

